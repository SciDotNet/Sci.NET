<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var functions = new List<(string FunctionName, string Description, string TypeConstraints)>
    {
        ("Sin", "Sine", "ITrigonometricFunctions<TNumber>"),
        ("Cos", "Cosine", "ITrigonometricFunctions<TNumber>"),
        ("Tan", "Tangent", "ITrigonometricFunctions<TNumber>"),
        ("Sin2", "Sine Squared", "ITrigonometricFunctions<TNumber>"),
        ("Cos2", "Cosine Squared", "ITrigonometricFunctions<TNumber>"),
        ("Tan2", "Tangent Squared", "ITrigonometricFunctions<TNumber>"),
        ("Sinh", "Hyperbolic Sine", "IHyperbolicFunctions<TNumber>"),
        ("Cosh", "Hyperbolic Cosine", "IHyperbolicFunctions<TNumber>"),
        ("Tanh", "Hyperbolic Tangent", "IHyperbolicFunctions<TNumber>"),
        ("Sinh2", "Hyperbolic Sine Squared", "IHyperbolicFunctions<TNumber>"),
        ("Cosh2", "Hyperbolic Cosine Squared", "IHyperbolicFunctions<TNumber>"),
        ("Tanh2", "Hyperbolic Tangent Squared", "IHyperbolicFunctions<TNumber>"),
        ("Asin", "Inverse Sine", "ITrigonometricFunctions<TNumber>"),
        ("Acos", "Inverse Cosine", "ITrigonometricFunctions<TNumber>"),
        ("Atan", "Inverse Tangent", "ITrigonometricFunctions<TNumber>"),
        ("ASinh", "Hyperbolic Inverse Sine", "IHyperbolicFunctions<TNumber>"),
        ("ACosh", "Hyperbolic Inverse Cosine", "IHyperbolicFunctions<TNumber>"),
        ("ATanh", "Hyperbolic Inverse Tangent", "IHyperbolicFunctions<TNumber>"),
        ("ASinh2", "Hyperbolic Inverse Sine Squared", "IHyperbolicFunctions<TNumber>"),
        ("ACosh2", "Hyperbolic Inverse Cosine Squared", "IHyperbolicFunctions<TNumber>"),
        ("ATanh2", "Hyperbolic Inverse Tangent Squared", "IHyperbolicFunctions<TNumber>"),
        ("Csc", "Cosecant", "ITrigonometricFunctions<TNumber>"),
        ("Sec", "Secant", "ITrigonometricFunctions<TNumber>"),
        ("Cot", "Cotangent", "ITrigonometricFunctions<TNumber>"),
        ("Csc2", "Cosecant Squared", "ITrigonometricFunctions<TNumber>"),
        ("Sec2", "Secant Squared", "ITrigonometricFunctions<TNumber>"),
        ("Cot2", "Cotangent Squared", "ITrigonometricFunctions<TNumber>"),
        ("Csch", "Hyperbolic Cosecant", "IHyperbolicFunctions<TNumber>"),
        ("Sech", "Hyperbolic Secant", "IHyperbolicFunctions<TNumber>"),
        ("Coth", "Hyperbolic Cotangent", "IHyperbolicFunctions<TNumber>"),
        ("Csch2", "Hyperbolic Cosecant Squared", "IHyperbolicFunctions<TNumber>"),
        ("Sech2", "Hyperbolic Secant Squared", "IHyperbolicFunctions<TNumber>"),
        ("Coth2", "Hyperbolic Cotangent Squared", "IHyperbolicFunctions<TNumber>"),
        ("Acsc", "Inverse Cosecant", "ITrigonometricFunctions<TNumber>"),
        ("Asec", "Inverse Secant", "ITrigonometricFunctions<TNumber>"),
        ("Acot", "Inverse Cotangent", "ITrigonometricFunctions<TNumber>"),
        ("ACsc2", "Inverse Cosecant Squared", "ITrigonometricFunctions<TNumber>"),
        ("ASec2", "Inverse Secant Squared", "ITrigonometricFunctions<TNumber>"),
        ("ACot2", "Inverse Cotangent Squared", "ITrigonometricFunctions<TNumber>"),
        ("ACsch", "Hyperbolic Inverse Cosecant", "IHyperbolicFunctions<TNumber>"),
        ("ASech", "Hyperbolic Inverse Secant", "IHyperbolicFunctions<TNumber>"),
        ("ACoth", "Hyperbolic Inverse Cotangent", "IHyperbolicFunctions<TNumber>"),
        ("ACsch2", "Hyperbolic Inverse Cosecant Squared", "IHyperbolicFunctions<TNumber>"),
        ("ASech2", "Hyperbolic Inverse Secant Squared", "IHyperbolicFunctions<TNumber>"),
        ("ACoth2", "Hyperbolic Inverse Cotangent Squared", "IHyperbolicFunctions<TNumber>"),
    };

    var tensorTypes = new List<(string Name, string ToFunction)>
    {
        ("Scalar", ".ToScalar()"),
        ("Vector", ".ToVector()"),
        ("Matrix", ".ToMatrix()"),
        ("Tensor", ".ToTensor()"),
        ("ITensor", ""),
    };
#>
// Copyright (c) Sci.NET Foundation. All rights reserved.
// Licensed under the Apache 2.0 license. See LICENSE file in the project root for full license information.

using System.Diagnostics;
using System.Numerics;

// ReSharper disable once CheckNamespace
#pragma warning disable IDE0130
namespace Sci.NET.Mathematics.Tensors;
#pragma warning restore IDE0130

/// <summary>
/// A class containing extension methods for trigonometric functions.
/// </summary>
[PublicAPI]
public static class TrigonometryExtensions
{
<#
    foreach (var (functionName, description, constraints) in functions)
    {
        foreach (var (tensorType, toFunction) in tensorTypes)
        {
#>
    /// <summary>
    /// Computes the <#= description #> of the specified <see cref="<#=tensorType#>{TNumber}"/>.
    /// </summary>
    /// <param name="tensor">The tensor to calculate the <#=description#> of.</param>
    /// <typeparam name="TNumber">The number type of the <see cref="<#=tensorType#>{TNumber}"/>.</typeparam>
    /// <returns>The <#= description #> of the specified <see cref="<#=tensorType#>{TNumber}"/>.</returns>
    [DebuggerStepThrough]
    public static <#= tensorType #><TNumber> <#= functionName #><TNumber>(this <#= tensorType #><TNumber> tensor)
        where TNumber : unmanaged, INumber<TNumber>, <#= constraints #>
    {
        return TensorServiceProvider
            .GetTensorOperationServiceProvider()
            .GetTrigonometryService()
            .<#= functionName #>(tensor)
            <#= toFunction #>;
    }

<#
        }
    }
#>
#pragma warning disable RCS1036

#pragma warning restore RCS1036
}
